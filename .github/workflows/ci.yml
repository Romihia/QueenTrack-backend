name: CI/CD Pipeline

on:
  push:
    branches:
      - stage
      - main

jobs:
  # Job לבדיקות ו-Docker
  validate-and-docker:
    runs-on: ubuntu-latest

    steps:
      # Checkout של הקוד
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      # כאשר בודקים את branch 'stage', נבצע בדיקות
      - name: Install dependencies and run tests
        if: github.ref == 'refs/heads/stage'
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f pytest ]; then pytest; fi

      # בודקים שה-Docker Image נבנה ועובד
      - name: Build Docker Image
        run: docker build -t queentrack-backend:latest .

      - name: Run Docker Container (Test)
        run: |
          docker run --name queentrack-backend-test -d -p 8000:8000 queentrack-backend:latest
          sleep 15
          docker ps

      # בדיקת בריאות הקונטיינר
      - name: Health Check
        run: |
          # בדיקה אם השירות מגיב
          for i in {1..5}; do
            if curl -f http://localhost:8000/health 2>/dev/null || curl -f http://localhost:8000/ 2>/dev/null; then
              echo "✅ Health check passed"
              break
            else
              echo "⏳ Attempt $i failed, retrying in 5 seconds..."
              sleep 5
            fi
          done

      # עצירת הקונטיינר
      - name: Stop Docker Container
        if: always()
        run: |
          docker stop queentrack-backend-test || true
          docker rm queentrack-backend-test || true

  # Job אוטומטי לפריסה לפרודקשן
  deploy-to-production:
    if: github.ref == 'refs/heads/main'
    needs: validate-and-docker
    runs-on: ubuntu-latest

    environment:
      name: production
      url: "http://162.55.53.52:8000"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # הכנת מפתח SSH
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PRODUCTION_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts

      # יצירת תיקיית הפרויקט בשרת
      - name: Create project directory
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} "mkdir -p /opt/queentrack"

      # העברת קבצי הפריסה לשרת
      - name: Copy deployment files to server
        run: |
          # Copy all necessary files
          scp -i ~/.ssh/id_rsa -r ./* ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:/opt/queentrack/ || true

          # Copy specific files if they exist
          if [ -f "docker-compose.prod.yml" ]; then
            scp -i ~/.ssh/id_rsa docker-compose.prod.yml ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:/opt/queentrack/
          fi

          if [ -f ".env.production" ]; then
            scp -i ~/.ssh/id_rsa .env.production ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:/opt/queentrack/
          fi

      # ביצוע פריסה אוטומטית
      - name: Deploy to Production Server
        env:
          GITHUB_REPO: ${{ github.repository }}
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << EOF
            set -e
            echo "🚀 Starting QueenTrack deployment process..."
            
            # Navigate to project directory
            cd /opt/queentrack
            
            # Setup Git if not already done
            if [ ! -d ".git" ]; then
              echo "📥 Initializing git repository..."
              git init
              git remote add origin "https://github.com/${GITHUB_REPO}.git"
            fi
            
            # Pull latest code from main branch
            echo "📥 Pulling latest code from main branch..."
            git fetch origin main || echo "Fetch failed, continuing with existing code"
            git checkout main 2>/dev/null || git checkout -b main
            
            # Setup production environment
            echo "⚙️ Setting up production environment..."
            if [ -f ".env.production" ]; then
                cp .env.production .env
                echo "✅ Production environment configured"
            fi
            
            # Stop existing containers
            echo "🛑 Stopping existing containers..."
            if [ -f "docker-compose.prod.yml" ]; then
              docker compose -f docker-compose.prod.yml down || true
            else
              echo "⚠️ docker-compose.prod.yml not found, using docker-compose.yml"
              docker compose down || true
            fi
            
            # Clean up old Docker images
            echo "🧹 Cleaning up old Docker images..."
            docker system prune -f || true
            
            # Build and start new containers
            echo "🔨 Building and starting new containers..."
            if [ -f "docker-compose.prod.yml" ]; then
              docker compose -f docker-compose.prod.yml up --build -d
            else
              docker compose up --build -d
            fi
            
            # Wait for services to start
            echo "⏳ Waiting for services to start..."
            sleep 30
            
            # Health check
            echo "🏥 Checking service health..."
            COMPOSE_FILE="docker-compose.prod.yml"
            if [ ! -f "\$COMPOSE_FILE" ]; then
              COMPOSE_FILE="docker-compose.yml"
            fi
            
            if docker compose -f \$COMPOSE_FILE ps | grep -q "Up"; then
              echo "✅ Deployment successful! Service is running."
              docker compose -f \$COMPOSE_FILE ps
            else
              echo "❌ Deployment failed! Service is not running."
              docker compose -f \$COMPOSE_FILE logs --tail=50
              exit 1
            fi
            
            echo "🎉 Deployment completed successfully!"
          EOF

      # בדיקת בריאות מרחוק
      - name: Final Health Check
        run: |
          echo "🔍 Performing final health check..."
          sleep 15

          # בדיקה אם השירות מגיב מהאינטרנט
          for i in {1..5}; do
            if curl -f "http://${{ secrets.PRODUCTION_HOST }}:8000/health" 2>/dev/null || curl -f "http://${{ secrets.PRODUCTION_HOST }}:8000/" 2>/dev/null; then
              echo "✅ Final health check passed!"
              break
            else
              echo "⏳ Health check attempt $i failed, retrying in 10 seconds..."
              sleep 10
            fi
          done

      # התראה על הצלחה
      - name: Deployment Success Notification
        if: success()
        run: |
          echo "🎉 SUCCESS: QueenTrack Backend deployed to production!"
          echo "🌐 Production URL: http://${{ secrets.PRODUCTION_HOST }}:8000"
          echo "📊 Monitor service with SSH and run: docker compose ps"
          echo "📋 View logs with SSH and run: docker compose logs"

      # התראה על כישלון
      - name: Deployment Failure Notification
        if: failure()
        run: |
          echo "❌ FAILURE: QueenTrack Backend deployment failed!"
          echo "🔍 Check the logs above for more details"
          echo "🛠️ Connect to server via SSH to troubleshoot"
