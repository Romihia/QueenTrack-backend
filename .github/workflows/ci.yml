name: CI/CD Pipeline

on:
  push:
    branches:
      - stage
      - main

jobs:
  # Job לבדיקות ו-Docker
  validate-and-docker:
    runs-on: ubuntu-latest

    steps:
      # Checkout של הקוד
      - name: Checkout code
        uses: actions/checkout@v3

      # כאשר בודקים את branch 'stage', נבצע בדיקות
      - name: Install dependencies and run tests
        if: github.ref_name == 'stage'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pytest

      # בודקים שה-Docker Image נבנה ועובד
      - name: Build Docker Image
        run: docker build -t queentrack-backend:latest .

      - name: Run Docker Container (Test)
        run: |
          docker run --name queentrack-backend-test -d -p 8000:8000 queentrack-backend:latest
          sleep 10  # ממתינים לוודא שהשירות עלה
          docker ps  # מציגים קונטיינרים פעילים

      # בדיקת בריאות הקונטיינר
      - name: Health Check
        run: |
          # בדיקה אם השירות מגיב
          curl -f http://localhost:8000/health || curl -f http://localhost:8000/ || echo "Service may not have health endpoint, continuing..."

      # עצירת הקונטיינר
      - name: Stop Docker Container
        run: docker stop queentrack-backend-test && docker rm queentrack-backend-test

  # Job אוטומטי לפריסה לפרודקשן
  deploy-to-production:
    if: github.ref_name == 'main'
    needs: validate-and-docker
    runs-on: ubuntu-latest

    environment:
      name: production
      url: http://${{ secrets.PRODUCTION_HOST }}:8000

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # הכנת מפתח SSH
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PRODUCTION_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts

      # העברת קבצי הפריסה לשרת
      - name: Copy deployment files to server
        run: |
          # Copy docker-compose production file
          scp -i ~/.ssh/id_rsa docker-compose.prod.yml ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:/opt/queentrack/

          # Copy production environment file
          scp -i ~/.ssh/id_rsa .env.production ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:/opt/queentrack/

          # Copy deployment script
          scp -i ~/.ssh/id_rsa .github/scripts/deploy.sh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:/opt/queentrack/

          # Make deployment script executable
          ssh -i ~/.ssh/id_rsa ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} "chmod +x /opt/queentrack/deploy.sh"

      # ביצוע פריסה אוטומטית
      - name: Deploy to Production Server
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            set -e
            echo "🚀 Starting QueenTrack deployment process..."
            
            # Navigate to project directory
            cd /opt/queentrack
            
            # Update repository URL in deploy script with actual repo
            sed -i 's|YOUR_USERNAME|${{ github.repository_owner }}|g' deploy.sh
            
            # Pull latest code from main branch
            echo "📥 Pulling latest code from main branch..."
            git fetch origin || git clone https://github.com/${{ github.repository }}.git .
            git checkout main
            git reset --hard origin/main
            
            # Setup production environment
            echo "⚙️ Setting up production environment..."
            if [ -f ".env.production" ]; then
                cp .env.production .env
                echo "✅ Production environment configured"
            fi
            
            # Stop existing containers
            echo "🛑 Stopping existing containers..."
            docker-compose -f docker-compose.prod.yml down || true
            
            # Clean up old Docker images
            echo "🧹 Cleaning up old Docker images..."
            docker image prune -af || true
            
            # Build and start new containers
            echo "🔨 Building and starting new containers..."
            docker-compose -f docker-compose.prod.yml up --build -d
            
            # Wait for services to start
            echo "⏳ Waiting for services to start..."
            sleep 20
            
            # Health check
            echo "🏥 Checking service health..."
            if docker-compose -f docker-compose.prod.yml ps | grep -q "Up"; then
              echo "✅ Deployment successful! Service is running."
              docker-compose -f docker-compose.prod.yml ps
            else
              echo "❌ Deployment failed! Service is not running."
              docker-compose -f docker-compose.prod.yml logs
              exit 1
            fi
            
            echo "🎉 Deployment completed successfully!"
          EOF

      # בדיקת בריאות מרחוק
      - name: Final Health Check
        run: |
          echo "🔍 Performing final health check..."
          sleep 10
          # בדיקה אם השירות מגיב מהאינטרנט
          curl -f http://${{ secrets.PRODUCTION_HOST }}:8000/health || curl -f http://${{ secrets.PRODUCTION_HOST }}:8000/ || echo "⚠️ Service may not have health endpoint, but deployment completed."

      # התראה על הצלחה
      - name: Deployment Success Notification
        run: |
          echo "🎉 SUCCESS: QueenTrack Backend deployed to production!"
          echo "🌐 Production URL: http://${{ secrets.PRODUCTION_HOST }}:8000"
          echo "📊 Monitor service: docker-compose -f docker-compose.prod.yml ps"
          echo "📋 View logs: docker-compose -f docker-compose.prod.yml logs"

      - name: Create deployment package
        run: |
          # Create deployment files
          mkdir -p deploy
          cp docker-compose.prod.yml deploy/

          # Create secure environment file
          cat > deploy/.env.production << EOF
          $(cat .env.production)
          SERVER_PASSWORD=${{ secrets.SERVER_PASSWORD }}
          EOF

          # Copy deployment script
          cp .github/scripts/deploy.sh deploy/
          chmod +x deploy/deploy.sh
