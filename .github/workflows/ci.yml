name: CI/CD Backend Pipeline

on:
  push:
    branches:
      - stage
      - main
  pull_request:
    branches:
      - stage
      - main

env:
  PYTHON_VERSION: "3.11"

jobs:
  # 1. בדיקות סטטיות והרצת טסטים
  test:
    name: Lint & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          pip install flake8
          flake8 .

      - name: Run pytest
        run: |
          pytest --maxfail=1 --disable-warnings -q

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            .pytest_cache/
            htmlcov/

  # 2. Build & Smoke–Test Docker Image
  docker:
    name: Build & Smoke-Test Docker
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker Image
        run: docker build -t queentrack-backend:latest .

      - name: Run Container (smoke-test)
        run: |
          docker run --name queentrack-test -d -p 8000:8000 queentrack-backend:latest
          sleep 10
          # health endpoint
          curl -f http://localhost:8000/health || curl -f http://localhost:8000/ || (docker logs queentrack-test && exit 1)
          docker stop queentrack-test && docker rm queentrack-test

  # 3. Deploy to Staging (branch stage)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/stage'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key for Staging
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.STAGING_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "${{ secrets.STAGING_HOST }}" >> ~/.ssh/known_hosts

      - name: Copy docker-compose + env to Staging
        run: |
          scp -i ~/.ssh/id_rsa docker-compose.prod.yml \
            "${{ secrets.STAGING_USER }}"@"${{ secrets.STAGING_HOST }}":/opt/queentrack/
          scp -i ~/.ssh/id_rsa .env.staging \
            "${{ secrets.STAGING_USER }}"@"${{ secrets.STAGING_HOST }}":/opt/queentrack/.env

      - name: SSH & bring up Staging
        run: |
          ssh -i ~/.ssh/id_rsa "${{ secrets.STAGING_USER }}"@"${{ secrets.STAGING_HOST }}" << 'EOF'
            set -e
            cd /opt/queentrack
            docker-compose -f docker-compose.prod.yml down || true
            docker image prune -af || true
            docker-compose -f docker-compose.prod.yml up --build -d
            # wait + health-check
            sleep 15
            curl -f http://localhost:8000/health || exit 1
          EOF

  # 4. Deploy to Production (branch main)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key for Production
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PRODUCTION_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "${{ secrets.PRODUCTION_HOST }}" >> ~/.ssh/known_hosts

      - name: Copy files to Production
        run: |
          scp -i ~/.ssh/id_rsa docker-compose.prod.yml \
            "${{ secrets.PRODUCTION_USER }}"@"${{ secrets.PRODUCTION_HOST }}":/opt/queentrack/
          scp -i ~/.ssh/id_rsa .env.production \
            "${{ secrets.PRODUCTION_USER }}"@"${{ secrets.PRODUCTION_HOST }}":/opt/queentrack/.env

      - name: SSH & bring up Production
        run: |
          ssh -i ~/.ssh/id_rsa "${{ secrets.PRODUCTION_USER }}"@"${{ secrets.PRODUCTION_HOST }}" << 'EOF'
            set -e
            cd /opt/queentrack
            docker-compose -f docker-compose.prod.yml down || true
            docker image prune -af || true
            docker-compose -f docker-compose.prod.yml up --build -d
            sleep 20
            curl -f http://localhost:8000/health || exit 1
          EOF

      - name: Final Health Check
        run: |
          echo "🔍 Performing public health check..."
          curl -f http://${{ secrets.PRODUCTION_HOST }}:8000/health \
            || curl -f http://${{ secrets.PRODUCTION_HOST }}:8000/ \
            || (echo "⚠️ Production health check failed" && exit 1)
          echo "✅ Production is healthy!"
